<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 碎片</title>
    <link>https://tisyang.github.io/post/</link>
    <description>Recent content in Posts on 碎片</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 25 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tisyang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 移动硬盘安全关闭</title>
      <link>https://tisyang.github.io/post/2023-05-25-linux-usb-storage-safe-shutdown/</link>
      <pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2023-05-25-linux-usb-storage-safe-shutdown/</guid>
      <description>最近固态价格越来越便宜了，就买了一个航雄M2移动硬盘盒，方案是 RTL9120B，支持 Nvme/Sata 双协议，然后弄了一块 1T 的大杯固态。然后把用了2年多的 U</description>
    </item>
    
    <item>
      <title>Linux 下 Logitech G29 编程</title>
      <link>https://tisyang.github.io/post/2022-03-15-logitech-g29-linux/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2022-03-15-logitech-g29-linux/</guid>
      <description>&lt;p&gt;本文介绍在 Linux 下 Logitech G29 套件的编程接入，包括摇杆数据读取、自动归中配置以及 LED 控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FTDI 串口驱动数据包延迟</title>
      <link>https://tisyang.github.io/post/2022-03-14-ftdi-serial-latency/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2022-03-14-ftdi-serial-latency/</guid>
      <description>&lt;p&gt;最近项目测试发现串口收取时存在延迟、拥堵现象，多个 packet 接收的时间戳是一样的，但是发送的时候的确是每帧间隔固定时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 CMake 在 C\C&#43;&#43; 中嵌入资源</title>
      <link>https://tisyang.github.io/post/2021-01-25-embed-assets-using-cmake/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2021-01-25-embed-assets-using-cmake/</guid>
      <description>&lt;p&gt;在程序中嵌入资源是很常见的需求，资源可以是 GLSL Shader、LICENSE/EULA 文本、预定义公钥、图标图片等等。特定的平台和SDK里，会有特定的接口和工具来导入管理这些资源，比如 VC 的rc、QT 的 qrc，或者直接使用文件读写、dlopen/dlsym 来加载外部资源。对于C\C++而言，可以直接将资源转换成字符串字面量或数组，嵌入到程序中使用，本文即讲解如何在 cmake 构建中方便的嵌入各种资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动使能 CAN 总线</title>
      <link>https://tisyang.github.io/post/2020-11-05-socketcan-auto-up/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-11-05-socketcan-auto-up/</guid>
      <description>&lt;p&gt;Linux 上 CAN 总线接口以网络设备形式呈现，默认系统启动时 CAN 总线处于 DOWN 模式，需要手动使用 &lt;code&gt;ip&lt;/code&gt; 命令配置并使能 &lt;code&gt;UP&lt;/code&gt;。但也可以使用系统 network 的 interfaces 式文件来实现 CAN 总线自动化配置和激活。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux To Go 系统优化</title>
      <link>https://tisyang.github.io/post/2020-11-02-tuning-linux-to-go/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-11-02-tuning-linux-to-go/</guid>
      <description>&lt;p&gt;本文主要讲述如何优化配置 U 盘上安装的 Debian/Linux 系统，使其适配各种硬件主机并优化 U 盘上性能。&lt;/p&gt;
&lt;p&gt;在高速 U 盘上安装 Linux 系统随身携带使用是很方便的事情，这跟 LiveCD 模式不同，所有的系统配置和文件都是随盘保存，不会随着重启重置，也不会因为更换机器而产生差异。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake 中使用 protobuf/protobuf-c</title>
      <link>https://tisyang.github.io/post/2020-10-05-cmake-protobuf/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-10-05-cmake-protobuf/</guid>
      <description>&lt;p&gt;本文主要提供一种在 C\C++ 项目中嵌入 Protobuf/Protobuf-C proto 源文件进行编译的应用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nuklear 界面库使用</title>
      <link>https://tisyang.github.io/post/2020-05-01-nuklear-gui/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-05-01-nuklear-gui/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/vurtun/nuklear/&#34;&gt;Nuklear&lt;/a&gt; 是一个 C 编写的、只有头文件的 GUI 界面库，也是 imgui 类的界面实现工具，支持多种渲染后端，包括 gdi/gdi+/D3D/X11/Xft/SDL/opengl 等，特别适合跨平台和工具软件的界面实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CORS 中继程序</title>
      <link>https://tisyang.github.io/post/2020-04-01-cors-relay-opensource/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-04-01-cors-relay-opensource/</guid>
      <description>&lt;p&gt;随着 CORS 全国一张网的运行，类似千寻这样的网络差分在实际运用中越来越普遍。这里开源一个可以中继重分发已有 CORS 服务的程序 &lt;a href=&#34;https://github.com/tisyang/cors-relay&#34;&gt;cors-relay&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>U盘Linux系统在任何PC上启动</title>
      <link>https://tisyang.github.io/post/2020-01-15-linux-uefi-boot-on-usb-drive/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2020-01-15-linux-uefi-boot-on-usb-drive/</guid>
      <description>&lt;p&gt;将系统安装在U盘中随身携带使用已经很容易了，比如 Windows 就有 Windows To Go。将系统装在U盘上需要一个寿命长久的U盘，而且随机读写性能要强。&lt;/p&gt;
&lt;p&gt;Linux 发行版都提供 Live ISO 镜像，也可以将系统直接装载 U盘上，但很多时候安装后的U盘可以在安装的 PC 上启动，换一个 PC 就无法启动了。这篇文章就讲述如何解决其他 PC 上启动的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个基于 libev 的 ntripcaster 简单实现</title>
      <link>https://tisyang.github.io/post/2019-08-08-opensource-ntripcaster/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2019-08-08-opensource-ntripcaster/</guid>
      <description>&lt;p&gt;Ntripcaster 是测绘领域GNSS相关的服务器软件，服务于差分GNSS测量、RTK测量等高精度测量测绘。&lt;/p&gt;
&lt;p&gt;这里开源一个基于 &lt;a href=&#34;http://libev.schmorp.de/&#34;&gt;libev&lt;/a&gt;，用 C 实现的简单 ntripcaster 服务器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>交叉编译 LCM 库</title>
      <link>https://tisyang.github.io/post/2019-02-27-cross-compile-lcm-library/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2019-02-27-cross-compile-lcm-library/</guid>
      <description>&lt;p&gt;LCM (&lt;a href=&#34;https://lcm-proj.github.io/&#34;&gt;Lightweight Communications and Marshalling&lt;/a&gt;)是一个
基于 UDP 网络的消息传递库，适合高带宽和低延迟的通信需求，模式为发布/订阅。&lt;/p&gt;
&lt;p&gt;本文讲述如何交叉编译 LCM 库到 arm linux上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于 nng/nanomsg 库的一点想法</title>
      <link>https://tisyang.github.io/post/2019-02-22-think-about-nng-library/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2019-02-22-think-about-nng-library/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/nanomsg/nng&#34;&gt;NNG/nanomsg&lt;/a&gt; 是最近项目上使用到的一个通信库，用来实现进程间过程调用和线程间通信，很是方便。&lt;/p&gt;
&lt;p&gt;NNG 是 nanomsg 的继任版本，而 nanomsg 则是流行的 &lt;a href=&#34;http://zeromq.org/&#34;&gt;ZMQ&lt;/a&gt; 的 C 重写版。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python tkinter GUI 中调用 shell 脚本</title>
      <link>https://tisyang.github.io/post/2018-07-25-call-shell-scripts-in-python-tkinter/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2018-07-25-call-shell-scripts-in-python-tkinter/</guid>
      <description>&lt;p&gt;本文给出一个 Python tkinter GUI 程序中调用 shell 脚本的代码示例，在 GUI 的一个文本框中会不断输出脚本的标准输出和标准错误且不会阻塞 GUI 窗体事件响应，同时也会在脚本执行完毕后根据状态（exit code）弹出提示框，如果在脚本运行中关闭窗口，会弹出提示并中断脚本的执行。&lt;/p&gt;
&lt;p&gt;这个样例很适合编写一些提供给非技术人员使用的小工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 CMake C\C&#43;&#43; 项目中使用 Git 仓库版本号</title>
      <link>https://tisyang.github.io/post/2018-07-05-use-git-version-in-cmake-project/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2018-07-05-use-git-version-in-cmake-project/</guid>
      <description>&lt;p&gt;为了便于自动化版本管理，在C\C++项目中通常会考虑使用 Git 标识的版本作为程序版本号，本文介绍如何在 CMake 构建的项目中加入此项功能支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Shell Tips</title>
      <link>https://tisyang.github.io/post/2017-10-16-linux-shell-tips/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2017-10-16-linux-shell-tips/</guid>
      <description>&lt;p&gt;适用于桌面以及嵌入式 Linux 环境脚本编程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apt源arm gcc交叉编译器注意事项</title>
      <link>https://tisyang.github.io/post/2017-09-13-notes-about-using-apt-package-cross-gcc-arm/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2017-09-13-notes-about-using-apt-package-cross-gcc-arm/</guid>
      <description>&lt;p&gt;做嵌入式 Linux 开发时候都需要使用交叉编译工具，这些一般是方案厂商提供，但我们通常也可以使用那些打包好的通用交叉编译工具，比如 Debian 上 apt 也有打包好的 arm 交叉编译工具： &lt;code&gt;gcc-arm-linux-gnueabi&lt;/code&gt; 和 &lt;code&gt;gcc-arm-linux-gnueabihf&lt;/code&gt;，对应 c++ 版本以 g++ 开头，这两类主要区别在于 CPU 对于浮点的处理上，涉及到 &lt;code&gt;armel&lt;/code&gt; 和 &lt;code&gt;armhf&lt;/code&gt; 架构的区别，详情参照&lt;a href=&#34;https://blogs.oracle.com/jtc/is-it-armhf-or-armel&#34;&gt;这里&lt;/a&gt;，你只需要选择对应开发板的架构工具即可。&lt;/p&gt;
&lt;p&gt;由于是 Debian 自己维护更新的包，上述的两个交叉编译工具通常都会更新比较频繁，会支持最新的标准和特性，但是我们的开发板上系统通常都不是最新的，所以在使用时需要注意，否则会出现编译后的程序无法在开发板上运行。&lt;/p&gt;
&lt;p&gt;最近在将 &lt;a href=&#34;https://github.com/mruby/mruby&#34;&gt;mruby&lt;/a&gt; 应用到嵌入式环境时就遇到这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CMake 项目模块化布局</title>
      <link>https://tisyang.github.io/post/2017-08-06-cmake-project-layout/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2017-08-06-cmake-project-layout/</guid>
      <description>&lt;p&gt;在 C\C++ 项目中，通常会有不止一个可执行程序，或者需要将一些调用封装成动态或静态库，来实现项目的模块化，本文就讲解一种支持这种项目布局的方法。&lt;/p&gt;
&lt;p&gt;CMake 支持子目录构建（&lt;code&gt;add_subdirectory&lt;/code&gt; 指令），本文介绍的布局方法就是基于这个功能来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell中高效分割字符串</title>
      <link>https://tisyang.github.io/post/2017-01-11-split-string-in-shell/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2017-01-11-split-string-in-shell/</guid>
      <description>&lt;p&gt;通常来说，使用 shell 脚本时候不需要太顾及程序的效率性，能完成任务，只要不是太慢，都可以接受。&lt;/p&gt;
&lt;p&gt;但在一些特定应用场合，脚本效率也是一个硬性限制，不能耗时太久，比如说，用 shell 来编写一些处理 HTTP 请求的 CGI 程序，脚本的执行效率直接影响了 HTTP 的响应速度。&lt;/p&gt;
&lt;p&gt;在 shell 中分割字符串有多种方法，比如利用 awk、cut 工具，还有内置方法，虽然效果相同，但是执行效率差距较大，尤其在处理大数据量上更是显著。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Freescale Yocto 编译自定义 Linux 系统镜像</title>
      <link>https://tisyang.github.io/post/2016-08-29-freescale-yocto-custom-linux-image/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-08-29-freescale-yocto-custom-linux-image/</guid>
      <description>&lt;p&gt;Yocto Project 是一个开源的协作软件，提供模板、工具和方法帮你创建定制的 Linux 系统和嵌入式产品，而无需关心硬件体系。适合嵌入式Linux开发人员使用。&lt;/p&gt;
&lt;p&gt;下面来以 Freescale 的 i.MX6UL 开发板为例，详细叙述如何搭建 Yocto 环境以及 Linux 镜像的定制编译和烧录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>32feet.net 蓝牙虚拟串口编程</title>
      <link>https://tisyang.github.io/post/2016-05-27-bluetooth-serialport-with-32feet-net-library/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-05-27-bluetooth-serialport-with-32feet-net-library/</guid>
      <description>&lt;p&gt;Windows 上的蓝牙编程并不方便，由于操作系统并没有提供统一的蓝牙操作接口，通常是由各个蓝牙设备商提供蓝牙栈，所以要想编程兼容这些不同的厂商蓝牙是一个问题。好在有个软件项目 &lt;a href=&#34;http://32feet.codeplex.com/&#34; title=&#34;32feet.NET&#34;&gt;32feet.NET&lt;/a&gt; 针对主流蓝牙协议栈提供了支持，包括 Microsfot, Widcomm, BlueSolei 等，同时还支持红外传输协议。&lt;/p&gt;
&lt;p&gt;蓝牙虚拟串口是一个较为常见的需求，为了兼容已有使用串口设备的程序，需要将蓝牙连接转为系统上的虚拟串口，然后提供给其他程序或库使用。&lt;a href=&#34;http://32feet.codeplex.com/&#34; title=&#34;32feet.NET&#34;&gt;32feet.NET&lt;/a&gt; 对此也提供了支持。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>远程调试C#程序环境的配置</title>
      <link>https://tisyang.github.io/post/2016-05-26-using-visual-studio-remote-debugger/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-05-26-using-visual-studio-remote-debugger/</guid>
      <description>&lt;p&gt;远程调试适用于需要在本机调试在其他 Windows 设备上运行的程序，典型的比如调试 Surface 上的程序。&lt;/p&gt;
&lt;p&gt;目标 Windows 主机不具备安装 Visual Studio 开发环境条件的，也可以用远程调试来进行调试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中软统一终端加密文件解密</title>
      <link>https://tisyang.github.io/post/2016-05-23-how-to-break-cs-uem-encrypt/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-05-23-how-to-break-cs-uem-encrypt/</guid>
      <description>&lt;p&gt;背景不提，通过搜索能看到这篇文章的，请彼此保持同情。&lt;/p&gt;
&lt;p&gt;中软统一终端这个软件通过网内文件加密存储，使用时自解密，保证一个局部网络的资料安全性，防止泄漏，主要用于密级文档、源代码和工程图纸的管控。&lt;/p&gt;
&lt;p&gt;听起来很高大上，但是在文件加密解密这条策略链上，漏洞是很多的，在具体部署上，漏洞就更多了。下面介绍一下如何利用策略漏洞解密被加密的文件，这里主要针对源代码，其他文档类似。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>添加可执行程序到 Path 中</title>
      <link>https://tisyang.github.io/post/2016-04-28-add-exe-to-path/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-04-28-add-exe-to-path/</guid>
      <description>&lt;p&gt;将一个程序加入到环境 Path 中，通常做法是将程序文件所在目录附加到系统或者用户的 Path 变量中，这样我们在任何路径下的命令行中，都可以调用该程序工作。大部分应用程序安装过程中的做法也是如此。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NDK 实例</title>
      <link>https://tisyang.github.io/post/2016-04-12-ndk-sample/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-04-12-ndk-sample/</guid>
      <description>&lt;p&gt;本文通过编写一个算法类二进制库以及示例App应用来介绍NDK开发，重点是二进制库编写、编译以及自定义参数的传递。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ndk-build提示“系统找不到指定的路径”问题</title>
      <link>https://tisyang.github.io/post/2016-03-28-ndk-build-problem/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://tisyang.github.io/post/2016-03-28-ndk-build-problem/</guid>
      <description>&lt;p&gt;如果是win32系统，使用ndk-build时提示出错，但是在命令行工具中看不到错误信息，进一步使用 &lt;code&gt;ndk-build 2&amp;gt;1.txt&lt;/code&gt; 来重定向，发现错误信息是“系统找不到路径”，那么你可能和我遇到相同的问题了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

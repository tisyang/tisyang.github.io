<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>碎片</title>
  <subtitle>tisyang&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tisyang.github.io/"/>
  <updated>2016-05-28T00:54:56.164Z</updated>
  <id>https://tisyang.github.io/</id>
  
  <author>
    <name>tisyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>32feet.net 蓝牙虚拟串口编程</title>
    <link href="https://tisyang.github.io/2016/05/bluetooth-serialport-with-32feet-net-library/"/>
    <id>https://tisyang.github.io/2016/05/bluetooth-serialport-with-32feet-net-library/</id>
    <published>2016-05-26T16:00:00.000Z</published>
    <updated>2016-05-28T00:54:56.164Z</updated>
    
    <content type="html">&lt;p&gt;Windows 上的蓝牙编程并不方便，由于操作系统并没有提供统一的蓝牙操作接口，通常是由各个蓝牙设备商提供蓝牙栈，所以要想编程兼容这些不同的厂商蓝牙是一个问题。好在有个软件项目 &lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;32feet.NET&lt;/a&gt; 针对主流蓝牙协议栈提供了支持，包括 Microsfot, Widcomm, BlueSolei 等，同时还支持红外传输协议。&lt;/p&gt;
&lt;p&gt;蓝牙虚拟串口是一个较为常见的需求，为了兼容已有使用串口设备的程序，需要将蓝牙连接转为系统上的虚拟串口，然后提供给其他程序或库使用。&lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;32feet.NET&lt;/a&gt; 对此也提供了支持。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;32feet.NET&lt;/a&gt; 依赖 .NET 3.5 版本以上框架，支持 Windows 桌面版本、Wndows CE 以及 Windows Phone。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;如果使用 Visual Studio 2015 或者 安装有 NuGet 工具的，可以直接通过 NuGet 安装。在 NuGet 命令行中输入&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Install-Package &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;feet.NET&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样 NuGet 会自动下载安装并添加到当前 .NET 项目中。可以检查项目 &lt;code&gt;References&lt;/code&gt; 项，如果存在 &lt;code&gt;InTheHand.Net.Personal&lt;/code&gt; 则表明已成功加入到项目中，如果没有，可以手动添加引用，NuGet 下载存放在 &lt;code&gt;SolutionName\packages\32feet.NET.x.x.x.x\&lt;/code&gt; 路径下。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;下面主要讲解 &lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;32feet.NET&lt;/a&gt; 的使用，覆盖蓝牙搜索、配对、直接连接以及虚拟串口服务。&lt;/p&gt;
&lt;h3 id=&quot;1-检测系统蓝牙可用性&quot;&gt;&lt;a href=&quot;#1-检测系统蓝牙可用性&quot; class=&quot;headerlink&quot; title=&quot;1. 检测系统蓝牙可用性&quot;&gt;&lt;/a&gt;1. 检测系统蓝牙可用性&lt;/h3&gt;&lt;p&gt;如果系统没有蓝牙设备或者蓝牙设备被禁用，那么可以通过以下函数来进行检查：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 定义于类 BTHelper 中 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IsPlatformSupportBT&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BluetoothClient bc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (PlatformNotSupportedException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bc.Close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果系统不支持蓝牙设备，那么 &lt;code&gt;new BluetoothClient&lt;/code&gt; 会抛出 &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; 异常，通过捕获这个异常，来检测系统蓝牙设备可用性。&lt;/p&gt;
&lt;h3 id=&quot;2-蓝牙搜索&quot;&gt;&lt;a href=&quot;#2-蓝牙搜索&quot; class=&quot;headerlink&quot; title=&quot;2. 蓝牙搜索&quot;&gt;&lt;/a&gt;2. 蓝牙搜索&lt;/h3&gt;&lt;p&gt;&lt;code&gt;BluetoothClient&lt;/code&gt; 对象有个方法 &lt;code&gt;DiscoverDevices&lt;/code&gt; 用于搜索蓝牙设备，该方法有多个重载版本，最终都是调用如下这个接口：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BluetoothDeviceInfo[] &lt;span class=&quot;title&quot;&gt;DiscoverDevices&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxDevices, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; authenticated, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; remembered, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; unknown, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; discoverableOnly&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数表明搜索的最大设备数，第二个参数表示是否搜索已配对设备，第三个表示是否搜索记住的设备，第四个表示是否搜索未知设备，第五个参数表示是搜索范围内可被发现的设备。&lt;/p&gt;
&lt;p&gt;这里面重要的是第二和第五个参数，第二个代表搜索系统中已配对列表中的设备，即使它们现在并不在线。第五个参数 XP 系统上不支持，表示搜索范围内可被发现的设备。&lt;/p&gt;
&lt;p&gt;如果我们需要获得系统中已配对列表中的蓝牙设备，可以这样调用 &lt;code&gt;DiscoverDevices(255, true, false, false)&lt;/code&gt;，这里使用了4个参数的重载版本，只将第二个参数置为 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果我们需要搜索周围环境中可用的蓝牙设备，可以这样调用 &lt;code&gt;DiscoverDevices(255, false, false, false, true)&lt;/code&gt;，这个调用等同于 &lt;code&gt;DiscoverDevicesInRange()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，这个调用是同步阻塞的，在搜索没有结束之前函数不会返回。所以通常我们需要将这个调用放入工作线程中。例外的是，如果只是获取系统中已配对列表中的设备，这个调用会很快完成，不会占用当前线程太多时间。&lt;/p&gt;
&lt;p&gt;库中同时提供了一个异步搜索方法，由类 &lt;code&gt;BluetoothComponent&lt;/code&gt; 提供，由事件 &lt;code&gt;DiscoverDevicesProgress&lt;/code&gt; 和 事件 &lt;code&gt;DiscoverDevicesComplete&lt;/code&gt; 以及方法 &lt;code&gt;DiscoverDevicesAsync&lt;/code&gt; 来实现。这个和用 &lt;code&gt;BackgroundWorker&lt;/code&gt; 来实现 &lt;code&gt;DiscoverDevices()&lt;/code&gt; 异步查找是一样的。&lt;/p&gt;
&lt;p&gt;PS: 可以通过 VS 的 Object Browser 查看 &lt;code&gt;InTheHand.Net.Personal&lt;/code&gt; 库中的函数接口说明，说明非常翔实。&lt;/p&gt;
&lt;h3 id=&quot;3-检测蓝牙设备是否在范围内&quot;&gt;&lt;a href=&quot;#3-检测蓝牙设备是否在范围内&quot; class=&quot;headerlink&quot; title=&quot;3. 检测蓝牙设备是否在范围内&quot;&gt;&lt;/a&gt;3. 检测蓝牙设备是否在范围内&lt;/h3&gt;&lt;p&gt;当需要检查一个蓝牙设备是否在有效范围内，可以通过查询一个 Fake Service ID 来实现。&lt;/p&gt;
&lt;p&gt;如果蓝牙设备在范围内可访问，那么查询的结果是返回的服务记录为空，表示不支持此服务；如果蓝牙设备不在范围内，那么会抛出套接字异常。&lt;/p&gt;
&lt;p&gt;以下为检测代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 定义于类 BTHelper 中 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestingIfInRange&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;BluetoothAddress addr&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; inRange = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Guid fakeUuid = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Guid(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;F13F471D-47CB-41d6-9609-BAD0690BF891&amp;#125;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BluetoothDeviceInfo device = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothDeviceInfo(addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ServiceRecord[] records = device.GetServiceRecords(fakeUuid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.Assert(records.Length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Why are we getting any records? len: &quot;&lt;/span&gt; + records.Length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inRange = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (SocketException)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inRange = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inRange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，因为蓝牙设备通信需要时间，所以这个调用也需要较长时间才能完成，未完成之前进入阻塞不返回，所以这个方法也需要放入工作线程中执行。&lt;/p&gt;
&lt;p&gt;这部分内容可以参考官方文档： &lt;a href=&quot;http://32feet.codeplex.com/wikipage?title=Testing%20if%20a%20device%20is%20in%20range&quot; title=&quot;Testing if a device is in range&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tesing if a device is in rage&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;4-蓝牙设备配对&quot;&gt;&lt;a href=&quot;#4-蓝牙设备配对&quot; class=&quot;headerlink&quot; title=&quot;4. 蓝牙设备配对&quot;&gt;&lt;/a&gt;4. 蓝牙设备配对&lt;/h3&gt;&lt;p&gt;蓝牙配对功能由类 &lt;code&gt;BluetoothSecurity&lt;/code&gt; 的静态方法 &lt;code&gt;PairRequest(BluetoothAddress device, string pin)&lt;/code&gt; 提供，其中第一个参数是目标设备地址，第二个参数是用于配对的 Pin 码。配对成功返回 &lt;code&gt;true&lt;/code&gt;，失败返回 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解除配对是 &lt;code&gt;BluetoothSecurity.RemoveDevice(BluetoothAddress device)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;配对操作也需要将长时间完成，所以这个方法也需要放入工作线程中执行。&lt;/p&gt;
&lt;h3 id=&quot;5-蓝牙直接连接&quot;&gt;&lt;a href=&quot;#5-蓝牙直接连接&quot; class=&quot;headerlink&quot; title=&quot;5. 蓝牙直接连接&quot;&gt;&lt;/a&gt;5. 蓝牙直接连接&lt;/h3&gt;&lt;p&gt;如果不需要蓝牙虚拟串口而直接读写蓝牙数据，那么可以使用直接连接，这个可以参照官方文档：&lt;a href=&quot;http://32feet.codeplex.com/wikipage?title=General%20Bluetooth%20Data%20Connections&quot; title=&quot;General Bluetooth Data Connections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;General Bluetooth Data Connections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;通过直接连接获取一个可读写的 &lt;code&gt;System.IO.Stream&lt;/code&gt; 流对象，就可以直接对蓝牙进行读写数据操作了。以下为官方样例中的代码&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BluetoothAddress addr = BluetoothAddress.Parse(&lt;span class=&quot;string&quot;&gt;&quot;001122334455&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Guid serviceClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serviceClass = BluetoothService.SerialPort;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// - or - etc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// serviceClass = MyConsts.MyServiceUuid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ep = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothEndPoint(addr, serviceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cli = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cli.Connect(ep);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stream peerStream = cli.GetStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// peerStream.Write/Read ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;6-蓝牙虚拟串口&quot;&gt;&lt;a href=&quot;#6-蓝牙虚拟串口&quot; class=&quot;headerlink&quot; title=&quot;6. 蓝牙虚拟串口&quot;&gt;&lt;/a&gt;6. 蓝牙虚拟串口&lt;/h3&gt;&lt;p&gt;这部分讲解如何实现将蓝牙连接转为系统上的虚拟串口并获取串口名，还可以参阅官方文档： &lt;a href=&quot;http://32feet.codeplex.com/wikipage?title=Bluetooth%20Serial%20Ports&quot; title=&quot;Bluetooth Seiral Ports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bluetooth Serial Ports&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;首先需要说明的是，虚拟串口和直接连接数据读写不能同时使用，如果已经使用了其中一个方法进行读写，那么另外的一个方法会失败。&lt;/p&gt;
&lt;p&gt;生成虚拟串口需要将蓝牙设备服务设置为 &lt;code&gt;BluetoothService.SerialPort&lt;/code&gt;，官方样例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BluetoothAddress addr = BluetoothAddress.Parse(&lt;span class=&quot;string&quot;&gt;&quot;123456789012&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BluetoothDeviceInfo device = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothDeviceInfo(addr);  &lt;span class=&quot;comment&quot;&gt;// Or from discovery etc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; state = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;device.SetServiceState(BluetoothService.SerialPort, state, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SetServiceState&lt;/code&gt; 的第一个函数表示服务标识，第二个表示要设置的服务状态，&lt;code&gt;true&lt;/code&gt; 为启用， &lt;code&gt;false&lt;/code&gt; 为禁用，第三个参数表示如果设置失败是否抛出异常。&lt;/p&gt;
&lt;p&gt;但在实际使用中，某些双模蓝牙在设置时，虽然设置成功但是依然会抛出 &lt;code&gt;Win32Exception&lt;/code&gt; 异常，所以这里建议调用此函数的重载版本 &lt;code&gt;SetServiceState(System.Guid service, bool state)&lt;/code&gt;，而想要知道是否设置成功，下面会介绍其他方法来获得。&lt;/p&gt;
&lt;p&gt;这个方法调用并不会告诉我们新生成的串口名，官方文档中的建议是通过设置前后的系统串口列表差异来获取新生成的串口名，而获取系统串口列表则可以调用静态方法 &lt;code&gt;SerialPort.GetPortNames&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是不建议用这个方法来获取虚拟串口名，因为这个不可靠而且容易出错，下面介绍另外一个可靠方法，而且这个方法也可以同时告诉我们设置虚拟串口服务是否成功。&lt;/p&gt;
&lt;h4 id=&quot;获取蓝牙虚拟串口名&quot;&gt;&lt;a href=&quot;#获取蓝牙虚拟串口名&quot; class=&quot;headerlink&quot; title=&quot;获取蓝牙虚拟串口名&quot;&gt;&lt;/a&gt;获取蓝牙虚拟串口名&lt;/h4&gt;&lt;p&gt;这部分参阅官方文档：&lt;a href=&quot;http://32feet.codeplex.com/wikipage?title=Getting%20Virtual%20COM%20Port%20Names&quot; title=&quot;Getting Virtual COM Port Names for Remote Bluetooth Devices&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Virtual COM Port Names for Remote Bluetooth Devices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;蓝牙虚拟串口在系统中都有记录，我们可以通过检索这个记录，来找到所设置的设备的虚拟串口名，同时也可以得知我们的蓝牙虚拟串口是否设置成功。&lt;/p&gt;
&lt;p&gt;通过调用 WMI 查询，可以枚举出系统中每个串口的详细信息。这里可以通过 PowerShell 来查询：&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:\&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Get-WmiObject&lt;/span&gt; -query &lt;span class=&quot;string&quot;&gt;&quot;select DeviceID,PNPDeviceID from Win32_SerialPort&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出样例（其中 &lt;code&gt;COM66&lt;/code&gt; 对应的蓝牙设备地址为 &lt;code&gt;00803A686519&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DeviceID     : COM66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PNPDeviceID  : BTHENUM\&amp;#123;00001101-0000-1000-8000-00805F9B34FB&amp;#125;\7&amp;amp;1D80ECD3&amp;amp;0&amp;amp;00803A686519_C00000003&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出蓝牙虚拟串口的 &lt;code&gt;PNPDeviceID&lt;/code&gt; 是以 &lt;code&gt;BTHENUM&lt;/code&gt; 开头，并且会将蓝牙地址存放其中。&lt;/p&gt;
&lt;p&gt;这个查询也可以通过 C# 代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Management;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Win32_SerialPort = &lt;span class=&quot;string&quot;&gt;&quot;Win32_SerialPort&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SelectQuery q = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SelectQuery(Win32_SerialPort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ManagementObjectSearcher s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ManagementObjectSearcher(q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; cur &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s.Get()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ManagementObject mo = (ManagementObject)cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; id = mo.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;DeviceID&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; pnpId = mo.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;PNPDeviceID&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;DeviceID:    &amp;#123;0&amp;#125; &quot;&lt;/span&gt;, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;PNPDeviceID: &amp;#123;0&amp;#125; &quot;&lt;/span&gt;, pnpId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;综上，我们可以定义一个函数，这个函数通过 WMI 检索所有串口设备信息，然后返回一个 &lt;code&gt;Hashtable&lt;/code&gt;，其中存储的键为蓝牙设备地址，存储的值为串口名。&lt;/p&gt;
&lt;p&gt;函数定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 定义于类 BTHelper 中 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Hashtable &lt;span class=&quot;title&quot;&gt;QueryBTHPorts&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Win32_SerialPort = &lt;span class=&quot;string&quot;&gt;&quot;Win32_SerialPort&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SelectQuery q = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SelectQuery(Win32_SerialPort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ManagementObjectSearcher s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ManagementObjectSearcher(q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hashtable hashResult = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hashtable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; cur &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s.Get())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ManagementObject mo = (ManagementObject)cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; id = mo.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;DeviceID&quot;&lt;/span&gt;).ToString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; pnpId = mo.GetPropertyValue(&lt;span class=&quot;string&quot;&gt;&quot;PNPDeviceID&quot;&lt;/span&gt;).ToString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;WMI&amp;gt;&amp;gt;DeviceID: &quot;&lt;/span&gt; + id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;WMI&amp;gt;&amp;gt;PNPDeviceID: &quot;&lt;/span&gt; + pnpId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Debug.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 仅处理蓝牙串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pnpId.StartsWith(&lt;span class=&quot;string&quot;&gt;&quot;BTHENUM&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 从 PNPDeviceID 中提取出蓝牙地址，策略是逆序字符串  &amp;amp; 后 _ 之前 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 蓝牙地址为6字节，HEX为12位字符 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rBound = pnpId.LastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lBound = pnpId.LastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Debug.Assert(rBound - lBound == &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Get BT Addr, this will nevery happened.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; addr = pnpId.Substring(lBound + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!hashResult.Contains(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                hashResult.Add(addr, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Debug.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Get BT Addr, addr&quot;&lt;/span&gt; + addr + &lt;span class=&quot;string&quot;&gt;&quot; has more than 1 ports&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hashResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样，WMI 检索也比较耗时，所以这个函数调用需要放入工作线程中执行。&lt;/p&gt;
&lt;p&gt;有了这个函数，我们可以通过结果中查找我们设置的蓝牙设备地址，就可以得知对应的虚拟串口名，而如果结果中没有我们设置的蓝牙设备地址，那么就可以认定设置虚拟串口服务失败了。&lt;/p&gt;
&lt;h2 id=&quot;样例代码&quot;&gt;&lt;a href=&quot;#样例代码&quot; class=&quot;headerlink&quot; title=&quot;样例代码&quot;&gt;&lt;/a&gt;样例代码&lt;/h2&gt;&lt;p&gt;这里介绍通过配合使用 &lt;code&gt;BackgroundWorker&lt;/code&gt; 来实现蓝牙设备的配对、生成虚拟串口的样例代码：&lt;/p&gt;
&lt;p&gt;我们通过传入蓝牙设备地址给 worker，worker 在 &lt;code&gt;DoWork&lt;/code&gt; 中帮我们处理所有步骤，过程中报告进度，并最终告诉我们结果。&lt;/p&gt;
&lt;p&gt;worker 的 &lt;code&gt;DoWork&lt;/code&gt; 事件代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 进行蓝牙连接操作的后台线程执行函数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 传入 蓝牙地址字符串 作为参数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 利用 ReportProgress 报告进度 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 利用 DoWorkEventArgs.Result 报告状态 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bgworkerConnection_DoWork&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; sender, DoWorkEventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BackgroundWorker worker = sender &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; BackgroundWorker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; args = e.Argument &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; finalportname = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BluetoothAddress addr = BluetoothAddress.Parse(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BluetoothDeviceInfo deviceinfo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BluetoothDeviceInfo(addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 检测设备是否在服务范围内，有些设备能被发现但不能被配对连接（如果已经被其他终端配对连接） */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 不在范围内则报告错误信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Testing if device in range...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!BTHelper.TestingIfInRange(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; msg = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;Error: Device &amp;#123;0&amp;#125;(&amp;#123;1&amp;#125;) is not reachable!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deviceinfo.DeviceName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deviceinfo.DeviceAddress.ToString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.Result = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Device is in range.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 检测设备是否是已配对设备 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deviceinfo.Authenticated)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 已配对设备枚举系统蓝牙串口，检测是否已绑定虚拟串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Querying Bluetooth serialport...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Hashtable bthTable1 = BTHelper.QueryBTHPorts();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bthTable1.ContainsKey(addr.ToString()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;   &lt;span class=&quot;comment&quot;&gt;/* 获取绑定串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                finalportname = bthTable1[addr.ToString()] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* !!! 跳出 !!! */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 此处 else 需考虑枚举结果中没有绑定串口的处理，如果没有绑定串口，那么重新设置串口服务 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 此处 else 部分会在下面的流程处理，见下方设置串口服务部分 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 需要进行配对 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Start pairing...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!BluetoothSecurity.PairRequest(addr, &lt;span class=&quot;string&quot;&gt;&quot;1234&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;  &lt;span class=&quot;comment&quot;&gt;/* 配对失败 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; msg = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;Error: Can not pair to Device &amp;#123;0&amp;#125;(&amp;#123;1&amp;#125;)!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        deviceinfo.DeviceName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        deviceinfo.DeviceAddress.ToString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.Result = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 设置串口服务 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* SLC蓝牙设置串口服务时，如果 SetServiceState */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 第三个参数为 true (允许异常) 那么则一定会抛出异常，即使虚拟串口创建成功 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 所以这里调用2个参数的重载版本 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 之后检查串口服务是否设置成功的方法就是 设置后检索蓝牙串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Enable serialport service...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        deviceinfo.SetServiceState(BluetoothService.SerialPort, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 枚举系统蓝牙串口，检查对应蓝牙是否有串口绑定 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Hashtable bthTable2 = BTHelper.QueryBTHPorts();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bthTable2.ContainsKey(addr.ToString()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 获取绑定的串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            finalportname = bthTable2[addr.ToString()] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* !!! 跳出 !!! */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;   &lt;span class=&quot;comment&quot;&gt;/* 启用串口服务失败或者无法检测到绑定串口 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; msg = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;Error: Failed to set Serialport service for Device &amp;#123;0&amp;#125;(&amp;#123;1&amp;#125;)!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deviceinfo.DeviceName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deviceinfo.DeviceAddress.ToString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.Result = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    worker.ReportProgress(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Open serialport...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Debug.WriteLine(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&amp;gt;PORT NMAE: &amp;#123;0&amp;#125;&quot;&lt;/span&gt;, finalportname));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 成功 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 将串口名放入消息中返回 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; okmsg = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;OK: &amp;#123;0&amp;#125;&quot;&lt;/span&gt;, finalportname);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e.Result = okmsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中通过灵活使用 &lt;code&gt;string&lt;/code&gt; 作为 &lt;code&gt;Result&lt;/code&gt; 来表明执行结果。&lt;/p&gt;
&lt;p&gt;worker 的 &lt;code&gt;RunCompleted&lt;/code&gt; 事件代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bgworkerConnection_RunCompleted&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; sender, RunWorkerCompletedEventArgs e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; msg = e.Result &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(msg.StartsWidth(&lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;   &lt;span class=&quot;comment&quot;&gt;/* OK */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MessageBox.Show(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;  &lt;span class=&quot;comment&quot;&gt;/* Error */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MessageBox.Show(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后续可以通过字符串处理提取出生成的串口名。&lt;/p&gt;
&lt;p&gt;worker 的启动代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bgworkerConnection.RunWorkerAsync(addrstring);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样子我们就获取到了绑定的虚拟串口名，但是在使用串口中要注意的是，虚拟串口打开过程中，本质上还是发起了一个蓝牙数据连接，所以打开过程会耗时较长，所以这个虚拟串口打开过程也需要放入工作线程中处理。如果虚拟串口对应的蓝牙设备没有在线或者其他原因造成不可用，那么打开时会抛出异常，需要在代码上进行处理。&lt;/p&gt;
&lt;p&gt;一旦蓝牙设备经过绑定并且设置虚拟串口服务成功，那么对应的串口会一直存在与系统的串口列表中，但这并不代表它是可用的，请在打开这类串口时添加异常处理代码。&lt;/p&gt;
&lt;p&gt;(完)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 上的蓝牙编程并不方便，由于操作系统并没有提供统一的蓝牙操作接口，通常是由各个蓝牙设备商提供蓝牙栈，所以要想编程兼容这些不同的厂商蓝牙是一个问题。好在有个软件项目 &lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot;&gt;32feet.NET&lt;/a&gt; 针对主流蓝牙协议栈提供了支持，包括 Microsfot, Widcomm, BlueSolei 等，同时还支持红外传输协议。&lt;/p&gt;
&lt;p&gt;蓝牙虚拟串口是一个较为常见的需求，为了兼容已有使用串口设备的程序，需要将蓝牙连接转为系统上的虚拟串口，然后提供给其他程序或库使用。&lt;a href=&quot;http://32feet.codeplex.com/&quot; title=&quot;32feet.NET&quot;&gt;32feet.NET&lt;/a&gt; 对此也提供了支持。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>远程调试C#程序环境的配置</title>
    <link href="https://tisyang.github.io/2016/05/using-visual-studio-remote-debugger/"/>
    <id>https://tisyang.github.io/2016/05/using-visual-studio-remote-debugger/</id>
    <published>2016-05-25T16:00:00.000Z</published>
    <updated>2016-05-26T15:05:18.575Z</updated>
    
    <content type="html">&lt;p&gt;远程调试适用于需要在本机调试在其他 Windows 设备上运行的程序，典型的比如调试 Surface 上的程序。&lt;/p&gt;
&lt;p&gt;目标 Windows 主机不具备安装 Visual Studio 开发环境条件的，也可以用远程调试来进行调试。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;微软MSDN官方有文章讲解如何进行远程调试，链接：&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/y7f5zaaa.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote Debugging&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;下载安装远程调试工具&quot;&gt;&lt;a href=&quot;#下载安装远程调试工具&quot; class=&quot;headerlink&quot; title=&quot;下载安装远程调试工具&quot;&gt;&lt;/a&gt;下载安装远程调试工具&lt;/h2&gt;&lt;p&gt;根据所使用的 Visual Studio 版本下载对应的远程调试工具，VS2015 版本的下载链接在此：&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=48155&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote Tools for Visual Studio 2015&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;远程调试工具根据架构分别有 x86，x64 和 ARM 版本，根据开发主机和调试目标设备的架构进行下载，注意下载版本需要与机器架构一致，即 x64 的机器必须安装 x64 版本的远程调试工具，不能使用 x86 版本的（在安装过程中会提示不支持）。&lt;/p&gt;
&lt;p&gt;在开发主机上和调试目标设备上分别安装远程调试工具。&lt;/p&gt;
&lt;h2 id=&quot;远程调试工具配置&quot;&gt;&lt;a href=&quot;#远程调试工具配置&quot; class=&quot;headerlink&quot; title=&quot;远程调试工具配置&quot;&gt;&lt;/a&gt;远程调试工具配置&lt;/h2&gt;&lt;p&gt;远程调试需要开发主机和目标设备处于同一局域网、工作组或者家庭组。远程调试不能通过 Internet 连接。&lt;/p&gt;
&lt;h3 id=&quot;1-目标设备配置&quot;&gt;&lt;a href=&quot;#1-目标设备配置&quot; class=&quot;headerlink&quot; title=&quot;1. 目标设备配置&quot;&gt;&lt;/a&gt;1. 目标设备配置&lt;/h3&gt;&lt;p&gt;首先，需要设置目标设备上的远程调试器。&lt;/p&gt;
&lt;p&gt;运行目标设备上安装好的 Remote Debugger，首次运行会提示进行配置，按照默认配置就好，主要是添加防火墙例外，另外一点是是否将远程调试配置成服务，根据需要或者参照官方文章进行配置。&lt;/p&gt;
&lt;p&gt;另外，我们需要在目标设备上添加一个账户，用于开发主机连接到目标主机上的 Remote Debugger。打开控制面板的用户帐户，新建一个普通账户，用户名为 &lt;code&gt;debug&lt;/code&gt;，同时设置一个密码。&lt;/p&gt;
&lt;p&gt;点击 Remote Debugger 的菜单项 Tools/Options，默认选中了 “Windows Authentication”，点击右侧的 “Permissions…” 按钮，进入权限设置对话框。点击 “Add” 手动输入 &lt;code&gt;debug&lt;/code&gt; 账户名，添加 &lt;code&gt;debug&lt;/code&gt; 账户的调试权限。同时需要设置一下 “Maximum idle time” ，这个是指 Remote Debugger 运行时的最大空闲时间，如果超过这个时间，Debugger 就会自动关闭，建议设置较长时间，比如 &lt;code&gt;3600&lt;/code&gt; (1小时)，否则可能需要频繁手动启动 Remote Debugger。&lt;/p&gt;
&lt;p&gt;这样目标设备上的配置完成。&lt;/p&gt;
&lt;p&gt;PS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试 .NET 程序只能使用 “Windows Authentication”，不支持 “No Authentication” 选项。&lt;/li&gt;
&lt;li&gt;可能每次启动 Remote Debugger 都需要重新添加 “Permissions…” 账户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-开发主机配置&quot;&gt;&lt;a href=&quot;#2-开发主机配置&quot; class=&quot;headerlink&quot; title=&quot;2. 开发主机配置&quot;&gt;&lt;/a&gt;2. 开发主机配置&lt;/h3&gt;&lt;p&gt;然后，需要配置开发主机上的调试环境。&lt;/p&gt;
&lt;p&gt;打开需要进行远程调试的工程，打开工程的 &lt;code&gt;Properties&lt;/code&gt; 页面，选择 &lt;code&gt;Debug&lt;/code&gt; 标签，勾选其中的 &lt;code&gt;Use remote machine&lt;/code&gt; 选项，然后填写入目标设备的名称，这个名称可以打开目标设备的系统信息看到，VS 会自动在其后添加端口号。这里同样可以填写目标设备IP。此外确保 &lt;code&gt;Working directiory&lt;/code&gt; 为空，下方 &lt;code&gt;Enable native code debugging&lt;/code&gt; 未被选中。&lt;/p&gt;
&lt;p&gt;这时候基本的远程调试就可以用了，但是我们需要在项目编译后将文件手动复制到远程主机上才能调试，这样很不方便（每次重新编译都需要重新复制）。官方文章中也没有提到如何实现自动部署。&lt;/p&gt;
&lt;p&gt;我们可以使用 Windows 文件共享来解决这个问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启用开发主机上的 Guest 账户。进入控制面板/用户帐户，启用 Guest 账户，同时，进入 控制面板/系统和安全/管理工具/本地安全策略，从左侧打开 本地策略/用户权限分配，右侧找到&lt;em&gt;拒绝从网络访问这台计算机&lt;/em&gt;，打开，然后删除掉 Guest 账户并保存。这样目标设备就可以通过局域网共享访问这台计算机的文件了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开发主机上新建一个 &lt;code&gt;Shared&lt;/code&gt; 目录，右键设置共享，添加 &lt;code&gt;Guest&lt;/code&gt; 账户为读取权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改工程 &lt;code&gt;Properties&lt;/code&gt; 页面，选择 &lt;code&gt;Build&lt;/code&gt; 标签，修改下面 &lt;code&gt;Output&lt;/code&gt; 的 &lt;code&gt;Output path&lt;/code&gt; 路径为共享目录路径，注意这里的应该为 &lt;code&gt;\\XXX\Shared\project_name\bin\Debug\&lt;/code&gt;， &lt;code&gt;XXX&lt;/code&gt; 部分是开发主机的名称。这里不能直接使用本机的目录路径，否则目标设备无法访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;启动项目调试，VS 会自动搜索目标设备名，如果找到则会提示输入认证用的用户名和密码，这里输入 &lt;code&gt;debug&lt;/code&gt; 和 用户密码即可。&lt;/p&gt;
&lt;p&gt;这样就可以开始程序调试了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;远程调试适用于需要在本机调试在其他 Windows 设备上运行的程序，典型的比如调试 Surface 上的程序。&lt;/p&gt;
&lt;p&gt;目标 Windows 主机不具备安装 Visual Studio 开发环境条件的，也可以用远程调试来进行调试。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中软统一终端加密文件解密</title>
    <link href="https://tisyang.github.io/2016/05/how-to-break-cs-uem-encrypt/"/>
    <id>https://tisyang.github.io/2016/05/how-to-break-cs-uem-encrypt/</id>
    <published>2016-05-22T16:00:00.000Z</published>
    <updated>2016-05-26T15:07:54.346Z</updated>
    
    <content type="html">&lt;p&gt;背景不提，通过搜索能看到这篇文章的，请彼此保持同情。&lt;/p&gt;
&lt;p&gt;中软统一终端这个软件通过网内文件加密存储，使用时自解密，保证一个局部网络的资料安全性，防止泄漏，主要用于密级文档、源代码和工程图纸的管控。&lt;/p&gt;
&lt;p&gt;听起来很高大上，但是在文件加密解密这条策略链上，漏洞是很多的，在具体部署上，漏洞就更多了。下面介绍一下如何利用策略漏洞解密被加密的文件，这里主要针对源代码，其他文档类似。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先讲一下中软终端的文件加密解密过程。&lt;/p&gt;
&lt;h2 id=&quot;加密解密过程&quot;&gt;&lt;a href=&quot;#加密解密过程&quot; class=&quot;headerlink&quot; title=&quot;加密解密过程&quot;&gt;&lt;/a&gt;加密解密过程&lt;/h2&gt;&lt;p&gt; 安装统一终端后，如果有加密策略部署，程序后台会扫描所有文件，判断文件后缀名或文件类型是否与策略一致来进行加密操作。&lt;/p&gt;
&lt;p&gt; 策略中通常会有针对加密文件类型相关软件的白名单，在这个名单中的程序，去处理加密的文件时，会&lt;strong&gt;透明地&lt;/strong&gt;读取到解密后的文件，然后再保存该类型的文件时，文件又自动被加密了。如果白名单程序新生成该类型文件，那么文件保存时会自动被加密。&lt;/p&gt;
&lt;p&gt;白名单程序的存在是为了保证日常操作，否则都不能用了岂不是因噎废食。&lt;/p&gt;
&lt;p&gt;当某类文件被白名单程序读取时，中软终端会自动把加密的文件解密，然后提供给程序。中软是通过文件驱动来实现了这一中间人角色，来桥接加密文件和程序，对于非白名单程序则不提供解密，这样打开就会乱码报错。&lt;/p&gt;
&lt;h2 id=&quot;策略的漏洞&quot;&gt;&lt;a href=&quot;#策略的漏洞&quot; class=&quot;headerlink&quot; title=&quot;策略的漏洞&quot;&gt;&lt;/a&gt;策略的漏洞&lt;/h2&gt;&lt;p&gt;这一套“透明地”加密解密的确很不错，但是停下想一想，尤其想一想互联网安全相关的实例，是不是有什么漏洞可破？&lt;/p&gt;
&lt;p&gt;互联网安全相关通常都是这个问题：Can I trust you?&lt;/p&gt;
&lt;p&gt;白名单是策略的关键，一个程序加入其中就表示对其可信，程序可以读取被加密的文件，这时候鉴权就很重要了。我们来根据实际来分析一下可能的鉴权策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最简单的，根据进程名来判定程序是否归属白名单中。这个方法最简单，也最灵活，部署也很方便，但是，只根据进程名会不会不大可靠？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进阶一点的，根据程序文件 Hash。在部署策略时，将可执行程序文件的 Hash 也加入其中，只有 Hash 匹配才认定程序是归属白名单中。这个是一个不错的方法，但是维护就很麻烦，因为很多程序经常会升级，这时候文件变了 Hash 也变了，策略就不得不更新，而对于一些离线机器得不到策略更新就更悲剧了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在2的基础上，继续完善，使用程序数字签名验证。程序文件的 Hash 会变，但是经过数字签名那么就可以认定这的确是谁谁谁家的程序。这个方法在终端中应该是被用到的，但肯定不是全部，毕竟只有大公司软件产品才会进行数字签名，比如 word/ppt/excel，可执行程序都是签名过的。而在软件开发中，有相当多开源工具是不可能进行签名的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过上述分析，可以猜测中软终端使用了方法1和3，而方法1只根据进程名判定是一个可以被利用的漏洞，我们可以编写克隆程序来读取加密文件。&lt;/p&gt;
&lt;p&gt;读取这边解决了，还需要考虑输出这环节。白名单程序保存文件时会进行加密，但是并不会加密所有文件。因为工具也可能用来处理不重要的事情，或者其他必须不能加密的地方，比如编译代码最终生成可执行程序，可执行程序不能被加密。而这部分通常是根据文件后缀名来判断是否需要被加密的。&lt;/p&gt;
&lt;p&gt;所以我们写一个与白名单中同名的程序，读取文件内容并输出到一个不会被加密的格式即可。&lt;/p&gt;
&lt;h2 id=&quot;例子代码&quot;&gt;&lt;a href=&quot;#例子代码&quot; class=&quot;headerlink&quot; title=&quot;例子代码&quot;&gt;&lt;/a&gt;例子代码&lt;/h2&gt;&lt;p&gt;因为依赖程序进程名，所以用脚本在这里不合适，最简单可以用 C，一个简单的文件拷贝就可以&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *fp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *nfp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; read;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Invalid args count!\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fp = fopen(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;snprintf&lt;/span&gt;(buf, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&quot;string&quot;&gt;&quot;%s.xxx&quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nfp = fopen(buf, &lt;span class=&quot;string&quot;&gt;&quot;wb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fp == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;File not exists!\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nfp == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Can&#39;t create file!\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((read = fread(buf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, sizeof(buf), fp)) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fwrite(buf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, read, nfp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(nfp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个程序接收一个参数，参数为文件名，然后输出一个源文件的拷贝，命名为原文件名 + “.xxx”，这里 “.xxx” 可以选别的易于识别而且不会被加密的就行。&lt;/p&gt;
&lt;p&gt;然后根据我们要解密的文件类型（这里以源代码为例），我们可以知道白名单程序中会有哪些程序，比如 IDE 中的 Visual Studio(&lt;code&gt;devenv.exe&lt;/code&gt;)， Android Studio(&lt;code&gt;androidstudio.exe&lt;/code&gt;)，代码管理程序的 SVN(&lt;code&gt;svn.exe&lt;/code&gt;)，等等。&lt;/p&gt;
&lt;p&gt;这里以 SVN 作为例子，我们编译程序 &lt;code&gt;gcc -o svn xxx.c&lt;/code&gt;，然后就生成了 &lt;code&gt;svn.exe&lt;/code&gt; 程序。&lt;/p&gt;
&lt;p&gt;在一台安装了统一终端并启用加密的机器上，拷贝 &lt;code&gt;svn.exe&lt;/code&gt; 到被加密代码的根目录。现在我们需要批量来解密我们需要的文件。&lt;/p&gt;
&lt;p&gt;用 Shift + 右键打开目录的命令行，然后输入 &lt;code&gt;powershell&lt;/code&gt; 进入 PowerShell 执行环境，然后输入如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Get-ChildItem&lt;/span&gt; -Recurse -Include *.c) &amp;#123; .\svn &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;.FullName &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该代码表示遍历目录下所有（包括子目录，子子目录）以 &lt;code&gt;.c&lt;/code&gt; 结尾的文件，然后对其执行 &lt;code&gt;svn&lt;/code&gt;，也就是我们写的 &lt;code&gt;svn.exe&lt;/code&gt; 程序，&lt;code&gt;FullName&lt;/code&gt; 表示使用绝对路径。&lt;/p&gt;
&lt;p&gt;该代码只是解密了所有 C 文件，如果需要解密其他文件，则需要再次输入并修改后缀名即可。&lt;/p&gt;
&lt;p&gt;PS: 因为 Windows 对于 Powershell 脚本的安全限制，这里并不能写入脚本中用 Powershell 执行，必须手动输入执行。&lt;/p&gt;
&lt;p&gt;最后，我们需要把解密的文件的文件名复原，这里使用脚本语言就比较容易了，例如 Ruby， 写一个 &lt;code&gt;rename.rb&lt;/code&gt; 放根目录然后执行即可：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Dir.glob(&lt;span class=&quot;string&quot;&gt;&quot;**/*.xxx&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|fname|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File.rename(fname, fname.chomp(&lt;span class=&quot;string&quot;&gt;&quot;.xxx&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;结束&quot;&gt;&lt;a href=&quot;#结束&quot; class=&quot;headerlink&quot; title=&quot;结束&quot;&gt;&lt;/a&gt;结束&lt;/h2&gt;&lt;p&gt;找出这种漏洞并不是有意为之，而是某些时候这样做反而效率干脆，臃肿的官僚管理和流程太折磨人了，本来这个系统被利用多数也是懒政造就，系统本身带来的负面影响已经盖过了积极意义。机器运行缓慢，加密导致的奇怪问题，开发部署环境不一致的 bug 等等等，而这其中，这个系统部署和维护不够专业及时也加重了消耗。&lt;/p&gt;
&lt;p&gt;多点真诚，少点套路。机械依赖工具而不改变思维通常都是徒劳。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;背景不提，通过搜索能看到这篇文章的，请彼此保持同情。&lt;/p&gt;
&lt;p&gt;中软统一终端这个软件通过网内文件加密存储，使用时自解密，保证一个局部网络的资料安全性，防止泄漏，主要用于密级文档、源代码和工程图纸的管控。&lt;/p&gt;
&lt;p&gt;听起来很高大上，但是在文件加密解密这条策略链上，漏洞是很多的，在具体部署上，漏洞就更多了。下面介绍一下如何利用策略漏洞解密被加密的文件，这里主要针对源代码，其他文档类似。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>添加可执行程序到 Path 中</title>
    <link href="https://tisyang.github.io/2016/04/add-exe-to-path/"/>
    <id>https://tisyang.github.io/2016/04/add-exe-to-path/</id>
    <published>2016-04-27T16:00:00.000Z</published>
    <updated>2016-04-28T16:25:05.659Z</updated>
    
    <content type="html">&lt;p&gt;将一个程序加入到环境 Path 中，通常做法是将程序文件所在目录附加到系统或者用户的 Path 变量中，这样我们在任何路径下的命令行中，都可以调用该程序工作。大部分应用程序安装过程中的做法也是如此。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;但是这样会将目录中的所有文件暴露到 Path 中，其中大部分是我们不需要用到的。这样做也增加了潜在 &lt;a href=&quot;https://zh.wikipedia.org/zh-cn/DLL%E5%9C%B0%E7%8D%84&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DLL Hell&lt;/a&gt; 隐患，比如同名不同版本 DLL 暴露到 Path 中低版本覆盖了高版本导致程序运行时异常。&lt;/p&gt;
&lt;p&gt;最好的做法是，只将我们需要用到的 exe 文件加入到 Path 中，Windows 上也的确有这样的解决方法。&lt;/p&gt;
&lt;p&gt;以 vim 为例。我们新建一个 &lt;code&gt;vim.bat&lt;/code&gt; 文件，编辑文件加入以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&quot;C:\Program Files (x86)\Vim\vim74\gvim.exe&quot; %*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将该文件保存到一个目录中，然后再&lt;strong&gt;将该目录加入到用户或系统 Path 变量中&lt;/strong&gt;。这样，这个 &lt;code&gt;vim.bat&lt;/code&gt; 就暴露到 Path 中，可以在命令行中随时调用了，调用名为 &lt;code&gt;vim&lt;/code&gt;，即 &lt;code&gt;.bat&lt;/code&gt; 文件的文件名。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@&lt;/code&gt; 表示禁止调用的回显，&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 引号包含目标程序的完整路径（这样路径中允许有空白符），&lt;code&gt;%*&lt;/code&gt; 表示将传递给 &lt;code&gt;.bat&lt;/code&gt; 文件的参数原封不动的传递给目标程序。&lt;/p&gt;
&lt;p&gt;我们可以在此目录下新建其他 &lt;code&gt;bat&lt;/code&gt; 文件，来向 Path 中加入各种所需的程序（同时也可以自定义名称）。&lt;/p&gt;
&lt;p&gt;PS: 其实如果打开 Ruby 的安装目录，我们就会发现，irb 和 gem 都使用了这种方法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;将一个程序加入到环境 Path 中，通常做法是将程序文件所在目录附加到系统或者用户的 Path 变量中，这样我们在任何路径下的命令行中，都可以调用该程序工作。大部分应用程序安装过程中的做法也是如此。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NDK 实例</title>
    <link href="https://tisyang.github.io/2016/04/ndk-sample/"/>
    <id>https://tisyang.github.io/2016/04/ndk-sample/</id>
    <published>2016-04-11T16:00:00.000Z</published>
    <updated>2016-04-12T15:05:33.021Z</updated>
    
    <content type="html">&lt;p&gt;本文通过编写一个算法类二进制库以及示例App应用来介绍NDK开发，重点是二进制库编写、编译以及自定义参数的传递。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-Java层接口定义&quot;&gt;&lt;a href=&quot;#1-Java层接口定义&quot; class=&quot;headerlink&quot; title=&quot;1. Java层接口定义&quot;&gt;&lt;/a&gt;1. Java层接口定义&lt;/h2&gt;&lt;p&gt;在做so库之前，需要首先设计约定库的接口，包括实现哪些功能，具体函数以及接口参数等等，这也是Java层调用所使用的接口。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们准备实现一个算法库，其中实现2个函数，一个返回算法库版本号，另一个计算线段中点坐标，主要用来展示so库编写以及参数传递过程。如果有需要其他的接口实现，可以参照这两个函数来做。&lt;/p&gt;
&lt;p&gt;要实现的接口文件 &lt;code&gt;com/zhdgps/ts/TSMath.java&lt;/code&gt;，其中 &lt;code&gt;tsmath&lt;/code&gt; 是要实现的so库名字。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zhdgps.ts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TSMath&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;tsmath&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* 获取版本信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* 计算两点连线中心点 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; TSCoord &lt;span class=&quot;title&quot;&gt;calcCenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TSCoord a, TSCoord b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;System.loadLibrary&lt;/code&gt; 用来加载so库，&lt;code&gt;static&lt;/code&gt; 表示这段代码要最先运行。&lt;/p&gt;
&lt;p&gt;接口函数用 &lt;code&gt;native&lt;/code&gt; 关键字修饰表明这是源生方法实现而不是 java 代码实现（JNI），在这里就是指在so库中实现的方法。&lt;/p&gt;
&lt;p&gt;同时辅助用的 &lt;code&gt;TSCoord&lt;/code&gt; 定义文件 &lt;code&gt;com/zhdgps/ts/TSCoord.java&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.zhdgps.ts;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TSCoord&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; E;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; Z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个文件都放属于包 &lt;code&gt;com.zhdgps.ts&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;2-so库C代码实现和编译&quot;&gt;&lt;a href=&quot;#2-so库C代码实现和编译&quot; class=&quot;headerlink&quot; title=&quot;2. so库C代码实现和编译&quot;&gt;&lt;/a&gt;2. so库C代码实现和编译&lt;/h2&gt;&lt;p&gt;完成库接口设计后，下面介绍如何用C来实现接口对应的功能。&lt;/p&gt;
&lt;p&gt;新建文件夹 &lt;code&gt;tsmath&lt;/code&gt;，用于存放 so 库工程。在 &lt;code&gt;tsmath&lt;/code&gt; 下新建子文件夹 &lt;code&gt;jni&lt;/code&gt; （命名为&lt;code&gt;jni&lt;/code&gt; 是 NDK 编译的需要）用于存放 so 库的源文件。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;jni&lt;/code&gt; 文件夹下新建文件 &lt;code&gt;tsmath.h&lt;/code&gt;、&lt;code&gt;tsmath.c&lt;/code&gt;、&lt;code&gt;algorithm.h&lt;/code&gt;、&lt;code&gt;algorithm.c&lt;/code&gt;、&lt;code&gt;Android.mk&lt;/code&gt; 以及 &lt;code&gt;Application.mk&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;tsmath.h&lt;/code&gt; 和 &lt;code&gt;tsmath.c&lt;/code&gt; 是 so 库的实现文件，&lt;code&gt;algorithm.h&lt;/code&gt; 和 &lt;code&gt;algorithm.c&lt;/code&gt; 是实际算法实现，相对来说 &lt;code&gt;tsmath.c&lt;/code&gt; 是 JNI 接口层，而 &lt;code&gt;algorithm.c&lt;/code&gt; 则是实际的算法C代码。这样区分有助于代码逻辑分层，当然都写在 &lt;code&gt;tsmath.c&lt;/code&gt; 中也是可行的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Android.mk&lt;/code&gt; 和 &lt;code&gt;Application.mk&lt;/code&gt; 是用于编译so库所需要的 &lt;code&gt;ndk-build&lt;/code&gt; 脚本文件，后面会进行详细叙述。&lt;/p&gt;
&lt;h3 id=&quot;2-1-算法实现（Algorithm）&quot;&gt;&lt;a href=&quot;#2-1-算法实现（Algorithm）&quot; class=&quot;headerlink&quot; title=&quot;2.1 算法实现（Algorithm）&quot;&gt;&lt;/a&gt;2.1 算法实现（&lt;code&gt;Algorithm&lt;/code&gt;）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Algorithm.h&lt;/code&gt; 文件内容：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifndef&lt;/span&gt; TS_ALGORITHM_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TS_ALGORITHM_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _TSCoord &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; E;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; Z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;TSCoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; TSAlgo_ErrorCode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TSALGO_NOERROR,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TSAlgo_CalcCenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TSCoord *a, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TSCoord *b, TSCoord *result)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __cplusplus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;头文件主要声明了一个计算中点的函数以及参数结构体类型，实现文件 &lt;code&gt;Algorithm.c&lt;/code&gt; 内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;algorithm.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TSAlgo_CalcCenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TSCoord *a, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TSCoord *b, TSCoord *result)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result-&amp;gt;N = (a-&amp;gt;N + b-&amp;gt;N) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result-&amp;gt;E = (a-&amp;gt;E + b-&amp;gt;E) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result-&amp;gt;Z = (a-&amp;gt;Z + b-&amp;gt;Z) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return TSALGO_NOERROR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有其他要实现的算法，都可以在这个模块内实现。此模块将被 JNI 接口层调用。&lt;/p&gt;
&lt;h3 id=&quot;2-2-JNI-接口实现&quot;&gt;&lt;a href=&quot;#2-2-JNI-接口实现&quot; class=&quot;headerlink&quot; title=&quot;2.2 JNI 接口实现&quot;&gt;&lt;/a&gt;2.2 JNI 接口实现&lt;/h3&gt;&lt;p&gt;JNI 接口部分是 so 库的核心，用于在 Java 调用和实际的 C/C++ 调用之间充当中间层。JNI 的实现有两种方法，一种是静态注册，一种是动态注册。&lt;/p&gt;
&lt;p&gt;静态注册是指用 &lt;code&gt;javah&lt;/code&gt; 工具来生成 C/C++ 头文件，获得正确的函数名。在运行时 JNI 按照指定规则的函数命名来调用对应的 C 函数。&lt;/p&gt;
&lt;p&gt;动态注册是指在动态库模块被加载的时候，模块注册的函数功能到 JVM 中。在对应函数被调用时，JVM会按照指定的注册函数名去调用实际的函数。&lt;/p&gt;
&lt;p&gt;静态注册生成的函数命名很长，而且如果要修改函数名，那么就要重新修改编译。静态注册的模块只有在被调用时才会被查找检查，如果函数命名有问题，会直接运行异常。&lt;/p&gt;
&lt;p&gt;动态注册在向 JVM 注册函数时，可以指定函数名，在编写时可以使用自定义的函数命名，如果需要修改维护，则只需要修改注册时的命名即可。&lt;/p&gt;
&lt;p&gt;NDK 推荐使用动态注册，在模块中定义 &lt;code&gt;JNI_OnLoad&lt;/code&gt; 函数,此函数在模块被加载时（即&lt;code&gt;System.loadLibrary&lt;/code&gt;）被调用，模块在此函数中注册所有函数。&lt;/p&gt;
&lt;p&gt;综上，我们要在模块中实现3个主要函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 动态库加载时候被调用的方法，进行初始化并注册模块函数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jint JNICALL &lt;span class=&quot;title&quot;&gt;JNI_OnLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JavaVM *vm, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *reserved)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 对应 TSMath.getVersion */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jstring JNICALL &lt;span class=&quot;title&quot;&gt;native_get_version&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject thiz)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 对应 TSMath.calcCenter */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jobject JNICALL &lt;span class=&quot;title&quot;&gt;native_calc_center&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject thiz, jobject coorda, jobject coordb)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;native_get_version&lt;/code&gt; 和 &lt;code&gt;native_calc_center&lt;/code&gt; 即 &lt;code&gt;TSMath&lt;/code&gt; 的 JNI 实现，函数参数和返回值也与之对应，每个函数的前两个参数 &lt;code&gt;JNIEnv *&lt;/code&gt; 和 &lt;code&gt;jobject&lt;/code&gt; 是 JNI 函数固定传入的参数。&lt;code&gt;jstring&lt;/code&gt; 对应 Java 的 &lt;code&gt;String&lt;/code&gt;，而自定义类对象均用 &lt;code&gt;jobject&lt;/code&gt; 来对应，完整的 JNI 类型匹配可以参见 &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp428&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Primitive Types&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;要实现动态注册，我们需要编写注册方法：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ------------------------------------------------------------- */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 方法注册资源表 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; JNINativeMethod native_methods[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;getVersion&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;()Ljava/lang/String;&quot;&lt;/span&gt;, (void *)native_get_version&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;calcCenter&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;(Lcom/zhdgps/ts/TSCoord;Lcom/zhdgps/ts/TSCoord;)Lcom/zhdgps/ts/TSCoord;&quot;&lt;/span&gt;, (void *)native_calc_center&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NATIVE_METHODS_COUNT (sizeof(native_methods)/sizeof(native_methods[0]))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 为某一个类注册方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;register_navtive_methods&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *classname,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    JNINativeMethod *methods,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; methods_num)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jclass clazz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clazz = (*env)-&amp;gt;FindClass(env, classname);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(clazz == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return JNI_FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((*env)-&amp;gt;RegisterNatives(env, clazz, methods, methods_num) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return JNI_FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return JNI_TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 为所有类注册本地方法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;register_natives&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 指定要注册的类名 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *classname = &lt;span class=&quot;string&quot;&gt;&quot;com/zhdgps/ts/TSMath&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return register_navtive_methods(env, classname, native_methods, NATIVE_METHODS_COUNT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;JNINativeMethod&lt;/code&gt; 是在 &lt;code&gt;&amp;lt;jni.h&amp;gt;&lt;/code&gt; 中定义的结构体，用于存储要动态注册的函数信息。第一个成员是字符串，用以表示要注册的函数所使用的函数名。第二个成员是字符串，用以表示函数的参数和返回值接口(&lt;code&gt;Type Signatures&lt;/code&gt;)，在这个字符串中，&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt;内表示函数的参数类型，然后是函数的返回值类型，&lt;code&gt;&amp;quot;()&amp;quot;&lt;/code&gt; 表示函数参数为空，而如果函数返回值为空，则用 &lt;code&gt;&amp;quot;()V&amp;quot;&lt;/code&gt; 表示。 &lt;code&gt;&amp;quot;Ljava/lang/String;&amp;quot;&lt;/code&gt; 表示为 &lt;code&gt;java.lang.String&lt;/code&gt;，&lt;code&gt;&amp;quot;Lxxx;&amp;quot;&lt;/code&gt; 是 &lt;code&gt;xxx&lt;/code&gt; 类型的完整写法，包字段分隔用斜杠代替，比如 &lt;code&gt;&amp;quot;Lcom/zhdgps/ts/TScoord;&amp;quot;&lt;/code&gt; 表示类型为 &lt;code&gt;com.zhdgps.ts.TSCoord&lt;/code&gt; 。如果参数有多个，依次写出对应类型。Java 源生类型可以参考 &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp16432&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Type Signatures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;register_natives&lt;/code&gt; 中，我们将这两个函数注册到了类 &lt;code&gt;com/zhgps/ts/TSmath&lt;/code&gt; 中，这个类就是之前在 Java 层定义的 &lt;code&gt;com.zhdgps.ts.TSMath&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面继续 &lt;code&gt;native_get_version&lt;/code&gt; 和 &lt;code&gt;native_calc_center&lt;/code&gt; 两个函数的实现&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TSMATH_VERSION  &lt;span class=&quot;string&quot;&gt;&quot;v0.1 alpha&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jstring JNICALL &lt;span class=&quot;title&quot;&gt;native_get_version&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject thiz)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (*env)-&amp;gt;NewStringUTF(env, TSMATH_VERSION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;native_get_version&lt;/code&gt; 比较简单，就返回一个版本文本字符串。这里需要注意的是，如果函数需要返回非ASCII的字符串，则不能直接使用 &lt;code&gt;NewStringUTF&lt;/code&gt;，因为 JNI 使用了修改版的 UTF-8 编码，具体可以参考 &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp16542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modified UTF-8 Strings&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 保存全局 TSCoord 的信息，便于后续检索成员 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; TSCoordJNIInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* ICS 4.0 之后，jclass 可能会变化，所以在获取后，调用 NewGlobalRef 保存引用，然后就不再变化 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jclass cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* ID 一般不会变化 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jmethodID mid_init;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; g_tscoord_jni;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper_init_tscoord_jniinfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jclass cls = (*env)-&amp;gt;FindClass(env, &lt;span class=&quot;string&quot;&gt;&quot;com/zhdgps/ts/TSCoord&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_n = (*env)-&amp;gt;GetFieldID(env, cls, &lt;span class=&quot;string&quot;&gt;&quot;N&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_e = (*env)-&amp;gt;GetFieldID(env, cls, &lt;span class=&quot;string&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jfieldID fid_z = (*env)-&amp;gt;GetFieldID(env, cls, &lt;span class=&quot;string&quot;&gt;&quot;Z&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;D&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jmethodID mid_init = (*env)-&amp;gt;GetMethodID(env, cls, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;()V&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* ICS 4.0 之后保存全局引用需要调用此函数，后续需要解除引用，使用函数 DeleteGlobalRef */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cls = (jclass)((*env)-&amp;gt;NewGlobalRef(env, cls));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_tscoord_jni.cls = cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_tscoord_jni.fid_n = fid_n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_tscoord_jni.fid_e = fid_e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_tscoord_jni.fid_z = fid_z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    g_tscoord_jni.mid_init = mid_init;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; jobject &lt;span class=&quot;title&quot;&gt;helper_new_tscoord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jobject tscoord = (*env)-&amp;gt;NewObject(env, g_tscoord_jni.cls, g_tscoord_jni.mid_init);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return tscoord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TSCoord &lt;span class=&quot;title&quot;&gt;helper_get_tscoord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject coord)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TSCoord res_coord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jdouble n = (*env)-&amp;gt;GetDoubleField(env, coord, g_tscoord_jni.fid_n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jdouble e = (*env)-&amp;gt;GetDoubleField(env, coord, g_tscoord_jni.fid_e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jdouble z = (*env)-&amp;gt;GetDoubleField(env, coord, g_tscoord_jni.fid_z);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res_coord.N = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res_coord.E = e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    res_coord.Z = z;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return res_coord;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper_set_tscoord&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject coord, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; TSCoord *source)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (*env)-&amp;gt;SetDoubleField(env, coord, g_tscoord_jni.fid_n, source-&amp;gt;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (*env)-&amp;gt;SetDoubleField(env, coord, g_tscoord_jni.fid_e, source-&amp;gt;E);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (*env)-&amp;gt;SetDoubleField(env, coord, g_tscoord_jni.fid_z, source-&amp;gt;Z);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;JNIEXPORT jobject JNICALL &lt;span class=&quot;title&quot;&gt;native_calc_center&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(JNIEnv *env, jobject thiz, jobject coorda, jobject coordb)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TSCoord a, b, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jobject obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = helper_get_tscoord(env, coorda);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = helper_get_tscoord(env, coordb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TSAlgo_CalcCenter(&amp;amp;a, &amp;amp;b, &amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    obj = helper_new_tscoord(env);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    helper_set_tscoord(env, obj, &amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们定义了一个结构体 &lt;code&gt;struct TSCoordJNIInfo&lt;/code&gt; 用于保存 Java 类 &lt;code&gt;com.zhdgps.ts.TSCoord&lt;/code&gt; 保存在 JVM 中的信息，包括类句柄、各字段ID（N，E，Z）以及构造函数ID。这些信息到后面获取/设置类对象字段时会用到，用全局结构体保存这些信息是为了效率，对于 &lt;code&gt;FieldID&lt;/code&gt; 和 &lt;code&gt;MethodID&lt;/code&gt; 来说，一旦类初始化后就不再变化，如果每次需要获取类对象信息时都去调用 &lt;code&gt;GetFieldID&lt;/code&gt; 和 &lt;code&gt;GetMethodID&lt;/code&gt; ，会给 JVM 带来负担，而且代码也有冗余。这里需要注意的是类句柄，对于 ICS4.0 以后的安卓系统，内存中的句柄可能会因为内存整理而移动，这意味着类句柄是会变化的，需要使用函数 &lt;code&gt;NewGlobalRef&lt;/code&gt; 来保证句柄不变。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;helper_init_tscoord_jniinfo&lt;/code&gt; 用于获取类信息，这个函数需要在 &lt;code&gt;JNI_OnLoad&lt;/code&gt; 中调用，保证在函数被调用前初始化全局信息。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;helper_new_tscoord&lt;/code&gt;、 &lt;code&gt;helper_get_tscoord&lt;/code&gt; 和 &lt;code&gt;helper_set_tscoord&lt;/code&gt; 是定义的三个辅助函数，用于新建 &lt;code&gt;TSCoord&lt;/code&gt; Java 对象、&lt;code&gt;TSCoord&lt;/code&gt; Java 对象与 C 结构体互相转换。&lt;/p&gt;
&lt;p&gt;如上，要获取一个类对象信息，依次需要使用 &lt;code&gt;FindClass&lt;/code&gt; 来获取类句柄，然后通过句柄来获取各个字段的 &lt;code&gt;FieldID&lt;/code&gt;，之后就可以通过这些字段 ID 来获取实际的值。&lt;code&gt;com.zhdgps.ts.TSCoord&lt;/code&gt; 字段均为 &lt;code&gt;double&lt;/code&gt; 所以使用 &lt;code&gt;GetDoubleField&lt;/code&gt; 来获取字段值，如果有其他类型，可以以此类推。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;native_calc_center&lt;/code&gt; 的逻辑就比较简单了，通过转换对象，然后转为调用 &lt;code&gt;Algorithm&lt;/code&gt; 中的算法，然后再将结果转换为 Java 对象返回。&lt;/p&gt;
&lt;h3 id=&quot;2-3-编译-so-库&quot;&gt;&lt;a href=&quot;#2-3-编译-so-库&quot; class=&quot;headerlink&quot; title=&quot;2.3 编译 so 库&quot;&gt;&lt;/a&gt;2.3 编译 so 库&lt;/h3&gt;&lt;p&gt;编辑 &lt;code&gt;Android.mk&lt;/code&gt; 文件&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_PATH := &lt;span class=&quot;variable&quot;&gt;$(call my-dir)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(CLEAR_VARS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 架构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_ARM_MODE := arm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 模块名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_MODULE := tsmath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 模块编译源文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_SRC_FILES := tsmath.c algorithm.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 模块依赖的库，比如要使用 android log 库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_LDLIBS := -llog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 编译为动态库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;include $(BUILD_SHARED_LIBRARY)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个文件是用于 so 模块的编译，其中模块名为 &lt;code&gt;tsmath&lt;/code&gt;，这样编译出的文件会自动加前后缀，输出为 &lt;code&gt;libtsmath.so&lt;/code&gt;。源文件部分加上项目使用的所有 C 文件，头文件不必加入其中。如果有依赖的安卓库，则加到 &lt;code&gt;LOCAL_LDLIBS&lt;/code&gt; 链接部分。&lt;/p&gt;
&lt;p&gt;编辑 &lt;code&gt;Application.mk&lt;/code&gt; 文件&lt;/p&gt;
&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;APP_OPTIM := release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里指定生成 release 版本的 so 库。如果这里如果需要生成其他平台库，则需要设置 &lt;code&gt;APP_ABI&lt;/code&gt; 字段。比如要生成全平台，则添加一句 &lt;code&gt;APP_ABI := all&lt;/code&gt;，这样会同时生成其他平台（x86 等）。&lt;/p&gt;
&lt;p&gt;下载 NDK ，完成安装并设置好系统 &lt;code&gt;Path&lt;/code&gt; 变量。下载地址 &lt;a href=&quot;http://developer.android.com/ndk/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android NDK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;jni&lt;/code&gt; 上一级目录 &lt;code&gt;tsmath&lt;/code&gt; 下打开命令行，输入命令 &lt;code&gt;ndk-build&lt;/code&gt; 进行编译，编译完成后的 so 文件自动会保存到 &lt;code&gt;libs&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;h2 id=&quot;3-so-库的使用&quot;&gt;&lt;a href=&quot;#3-so-库的使用&quot; class=&quot;headerlink&quot; title=&quot;3. so 库的使用&quot;&gt;&lt;/a&gt;3. so 库的使用&lt;/h2&gt;&lt;p&gt;下面来新建一个 Android 项目来测试一下 so 库。&lt;/p&gt;
&lt;p&gt;使用 Android Studio 新建一个 Hello World 项目，这里可以设置项目命名空间为 &lt;code&gt;com.zhdgps.ts&lt;/code&gt; 来方便后面的测试。在项目文件夹的 &lt;code&gt;app/src/main&lt;/code&gt; 目录下，新建文件夹 &lt;code&gt;jniLibs&lt;/code&gt;，然后复制 &lt;code&gt;tsmath/libs&lt;/code&gt; 目录下的编译输出到该文件夹中，注意保留 so 库的目录结构，比如 arm 架构编译的为 &lt;code&gt;jniLibs/armeabi/libtsmath.so&lt;/code&gt;。将 &lt;code&gt;TSCoord.java&lt;/code&gt; 和 &lt;code&gt;TSMath.java&lt;/code&gt; 文件复制到 &lt;code&gt;app/src/main/java/com/zhdgps/ts&lt;/code&gt; 目录下。Android Studi 会自动将添加的文件加入到工程中。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;MainActivity.java&lt;/code&gt; 文件， 在 &lt;code&gt;onCreate&lt;/code&gt; 中添加测试代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TSCoord a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TSCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.N = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.E = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.Z = &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TSCoord b = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TSCoord();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.N = &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.E = &lt;span class=&quot;number&quot;&gt;6.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.Z = &lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TSCoord c = TSMath.calcCenter(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String output = String.format(&lt;span class=&quot;string&quot;&gt;&quot;A(%f, %f, %f), B(%f, %f, %f) center: (%f, %f, %f)&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a.N, a.E, a.Z,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				b.N, b.E, b.Z,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				c.N, c.E, c.Z);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TextView view = (TextView)findViewById(R.id.message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.setText(output);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里测试了函数 &lt;code&gt;TSMath.calcCenter&lt;/code&gt;。编译项目并运行，就可以看到结果了。&lt;/p&gt;
&lt;p&gt;源码可以点击这里&lt;a href=&quot;/download/ndk_sample.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过编写一个算法类二进制库以及示例App应用来介绍NDK开发，重点是二进制库编写、编译以及自定义参数的传递。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ndk-build提示“系统找不到指定的路径”问题</title>
    <link href="https://tisyang.github.io/2016/03/ndk-build-problem/"/>
    <id>https://tisyang.github.io/2016/03/ndk-build-problem/</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2016-04-12T14:45:50.008Z</updated>
    
    <content type="html">&lt;p&gt;如果是win32系统，使用ndk-build时提示出错，但是在命令行工具中看不到错误信息，进一步使用 &lt;code&gt;ndk-build 2&amp;gt;1.txt&lt;/code&gt; 来重定向，发现错误信息是“系统找不到路径”，那么你可能和我遇到相同的问题了。&lt;/p&gt;
&lt;p&gt;这个并不是因为ndk-build不在 &lt;code&gt;path&lt;/code&gt; 路径中，而是NDK自己的问题。观察 &lt;code&gt;ndk-build&lt;/code&gt; 命令输出详细，调用 &lt;code&gt;gcc&lt;/code&gt; 的路径实际上并不对。&lt;/p&gt;
&lt;p&gt;在命令中使用的是 &lt;code&gt;&amp;lt;ndk_dir&amp;gt;/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86/&lt;/code&gt; 路径，但实际在x86版本的NDK目录中对比，其中只有 &lt;code&gt;&amp;lt;ndk_dir&amp;gt;/toolchains/arm-linux-androideabi-4.9/prebuilt/windows&lt;/code&gt; 目录，不是 &lt;code&gt;windows-x86&lt;/code&gt; ，将其重命名为 &lt;code&gt;windows-x86&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;这可能是r11b-x86版本NDK的一个bug。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果是win32系统，使用ndk-build时提示出错，但是在命令行工具中看不到错误信息，进一步使用 &lt;code&gt;ndk-build 2&amp;gt;1.txt&lt;/code&gt; 来重定向，发现错误信息是“系统找不到路径”，那么你可能和我遇到相同的问题了。&lt;/p&gt;
&lt;p&gt;这个并不是因
    
    </summary>
    
    
  </entry>
  
</feed>
